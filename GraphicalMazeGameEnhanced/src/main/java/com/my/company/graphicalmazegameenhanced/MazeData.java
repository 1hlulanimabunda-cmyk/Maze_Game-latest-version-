// File: src/main/java/com/mycompany/graphicalmazegameenhanced/MazeData.java
// ✅ FIXED: Added missing items 'H' (Level 4) and 'F' (Level 5) + verified all paths/exits

package com.mycompany.graphicalmazegameenhanced;

import java.util.Random;

public class MazeData {
    private static final Random random = new Random();

    /* --------------------------------------------------------------
       LEVEL 1 – Crystal of Eternity ('A')
       -------------------------------------------------------------- */
    public static final char[][] LEVEL1 = {
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
        {'#', 'P', '.', '.', '#', '.', '.', '.', '.', '#'},
        {'#', '.', '#', '.', '.', 'M', '#', '#', '.', '#'},
        {'#', '.', '#', '#', '#', '.', '#', '.', '.', '#'},
        {'#', 'A', '.', 'G', '#', '.', '#', '.', '#', '#'},  // ✅ 'A' at (4,1) - PICK THIS!
        {'#', '#', '.', '.', '#', '.', '.', '.', '.', '#'},
        {'#', '.', '#', '#', '#', '#', '#', '.', '#', '#'},
        {'#', '.', '.', '.', '.', '.', '#', '.', '.', '#'},
        {'#', '#', '#', '#', '#', '.', '#', 'M', 'E', '#'},  // ✅ Exit (8,8)
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
    };

    /* --------------------------------------------------------------
       LEVEL 2 – Ancient Altar Seal ('S')
       -------------------------------------------------------------- */
    public static final char[][] LEVEL2 = {
        {'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'},
        {'W', 'P', 'T', '.', 'W', '.', 'T', '.', '.', 'W'},
        {'W', '.', 'W', '.', '.', 'M', 'W', 'W', 'T', 'W'},
        {'W', 'T', 'W', 'W', 'W', '.', 'W', '.', '.', 'W'},
        {'W', '.', '.', 'G', 'W', 'T', 'W', '.', 'W', 'W'},
        {'W', 'W', '.', '.', 'W', '.', '.', 'T', '.', 'W'},
        {'W', '.', 'W', 'W', 'W', 'W', 'W', '.', 'W', 'W'},
        {'W', '.', 'T', '.', '.', '.', 'W', 'M', '.', 'W'},
        {'W', 'W', 'W', 'W', 'W', '.', 'W', 'E', 'S', 'W'},  // ✅ 'S' at (8,8), Exit (8,7)
        {'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'}
    };

    /* --------------------------------------------------------------
       LEVEL 3 – Celestial Spire ('C')
       -------------------------------------------------------------- */
    public static final char[][] LEVEL3 = {
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
        {'#', 'P', '.', 'T', '#', '.', '.', '.', '.', '#'},
        {'#', '.', '#', '.', '.', 'M', '#', 'T', '.', '#'},
        {'#', 'T', '#', '#', '#', '.', '#', '.', '.', '#'},
        {'#', '.', '.', 'G', '#', 'T', '#', '.', '#', '#'},
        {'#', '#', '.', '.', '#', '.', '.', 'T', '.', '#'},
        {'#', '.', '#', '#', '#', '#', '#', '.', '#', '#'},   // ✅ Path open (6,1)='.'
        {'#', '.', 'T', '.', '.', '.', '#', 'M', '.', '#'},
        {'#', '#', '#', '#', '#', '.', '#', 'C', 'E', '#'},   // ✅ 'C' at (8,7), Exit (8,8)
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
    };

    /* --------------------------------------------------------------
       LEVEL 4 – Warden's Heart ('H') 
       -------------------------------------------------------------- */
    public static final char[][] LEVEL4 = {
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
        {'#', 'P', '.', '.', '#', '.', '.', '.', '.', '#'},
        {'#', '.', '#', '.', '.', 'M', '#', '#', '.', '#'},
        {'#', '.', '#', '#', '#', '.', '#', '.', '.', '#'},
        {'#', '.', 'T', 'G', '#', '.', 'B', 'T', '#', '#'},  // Boss 'B' (4,6)
        {'#', '#', '.', '.', '#', '.', '.', '.', '.', '#'},
        {'#', '.', '#', 'X', '#', '#', '#', '.', '#', '#'},
        {'#', '.', '.', '.', '.', '.', '#', 'M', '.', '#'},
        {'#', '#', '#', '#', '#', '.', '#', 'H', 'E', '#'},  // ✅ 'H' at (8,7), Exit (8,8)
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
    };

    /* --------------------------------------------------------------
       LEVEL 5 – Final Prism ('F')
       -------------------------------------------------------------- */
    public static final char[][] LEVEL5 = {
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
        {'#', 'P', '.', '.', '#', '.', '.', '.', '.', '#'},
        {'#', '.', '#', '.', '.', 'M', '#', '#', '.', '#'},
        {'#', '.', '#', '#', '#', '.', '#', '.', '.', '#'},
        {'#', '.', '.', 'G', '#', '.', 'B', '.', '#', '#'},  // Final Boss 'B' (4,6)
        {'#', '#', '.', '.', '#', '.', '.', '.', '.', '#'},
        {'#', '.', '#', '#', '#', '#', '#', '.', '#', '#'},
        {'#', '.', '.', '.', '.', '.', '#', 'M', '.', '#'},
        {'#', '#', '#', '#', '#', '.', '#', 'F', 'E', '#'},  // ✅ 'F' at (8,7), Exit (8,8)
        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
    };

    /* --------------------------------------------------------------
       Utility methods (protects ALL items: A,S,C,H,F)
       -------------------------------------------------------------- */
    public static char[][] getMazeClone(int level) {
        char[][] src = switch (level) {
            case 1 -> LEVEL1;
            case 2 -> LEVEL2;
            case 3 -> LEVEL3;
            case 4 -> LEVEL4;
            case 5 -> LEVEL5;
            default -> LEVEL1;
        };
        char[][] out = new char[src.length][src[0].length];
        for (int i = 0; i < src.length; i++) out[i] = src[i].clone();
        return out;
    }

    public static int[] getSagePositionForLevel(int level) {
        return new int[]{4, 3};
    }

    public static void addRandomDecorations(char[][] maze, int count) {
        for (int i = 0; i < count; i++) {
            int rx, ry;
            do {
                rx = random.nextInt(maze.length);
                ry = random.nextInt(maze[0].length);
            } while (maze[rx][ry] != '.' ||
                    (rx == 1 && ry == 1) ||           // player start
                    (rx == 4 && ry == 3) ||           // sage
                    maze[rx][ry] == 'E' ||            // exit
                    "ASCHF".indexOf(maze[rx][ry]) != -1 ||  // ✅ ALL items!
                    maze[rx][ry] == 'M' || maze[rx][ry] == 'B');

            maze[rx][ry] = 'T';
        }
    }
}
